{
	"name": "chart",
	"type": "registry:ui",
	"dependencies": [
		"bits-ui@next"
	],
	"registryDependencies": [],
	"files": [
		{
			"name": "chart-container.svelte",
			"content": "<script>\n\timport { cn } from \"$lib/utils.js\";\n\timport { useId } from \"bits-ui\";\n\tlet { ref = $bindable(null), id = useId(), class: className, children, ...restProps } = $props();\n\n\tconst uniqueId = useId();\n\tconst chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`;\n</script>\n\n<div\n\tbind:this={ref}\n\tdata-chart={chartId}\n\tclass={cn(\n\t\t// \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n\t\t\"flex aspect-video justify-center text-xs\",\n\t\t// Overrides\n\t\t//\n\t\t// TODO: Ask for default/unique classnames to target when trying to override LayerChart styles\n\t\t//\n\t\t// Stroke around dots/marks when hovering\n\t\t\"[&_.grid]:stroke-border/50 [&_.stroke-white]:stroke-transparent\",\n\t\t// Tick labels on th x/y axes\n\t\t\"[&_.tickLabel]:fill-muted-foreground\",\n\t\t// Labels\n\t\t\"[&_text]:fill-foreground [&_text]:stroke-transparent\",\n\t\tclassName\n\t)}\n\t{...restProps}\n>\n\t{@render children?.()}\n</div>\n",
			"target": "chart/chart-container.svelte",
			"type": "registry:ui"
		},
		{
			"name": "chart-legend.svelte",
			"content": "<script>\n\timport { cn } from \"$lib/utils.js\";\n\timport { getPayloadConfigFromPayload } from \"./chart-utils.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tpayload,\n\t\tconfig,\n\t\thideIcon = false,\n\t\tverticalAlign = \"bottom\",\n\t\t...restProps\n\t} = $props();\n\n\tconst itemConfig = $derived(getPayloadConfigFromPayload(config, payload));\n</script>\n\n{#if itemConfig}\n\t<div\n\t\tclass={cn(\n\t\t\t\"flex items-center justify-center gap-4\",\n\t\t\tverticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n\t\t\tclassName\n\t\t)}\n\t\tbind:this={ref}\n\t\t{...restProps}\n\t>\n\t\t{#each itemConfig as item}\n\t\t\t<div class={cn(\"[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:size-3\")}>\n\t\t\t\t{#if item?.icon && !hideIcon}\n\t\t\t\t\t<item.icon />\n\t\t\t\t{:else}\n\t\t\t\t\t<div\n\t\t\t\t\t\tclass=\"size-2 shrink-0 rounded-[2px] bg-[--color-bg]\"\n\t\t\t\t\t\tstyle=\"--color-bg: {item?.color};\"\n\t\t\t\t\t></div>\n\t\t\t\t{/if}\n\t\t\t\t{item?.label}\n\t\t\t</div>\n\t\t{/each}\n\t</div>\n{/if}\n",
			"target": "chart/chart-legend.svelte",
			"type": "registry:ui"
		},
		{
			"name": "chart-tooltip.svelte",
			"content": "<script>\n\timport { cn } from \"$lib/utils.js\";\n\timport { getPayloadConfigFromPayload } from \"./chart-utils.js\";\n\n\tlet {\n\t\tref = $bindable(null),\n\t\tclass: className,\n\t\tpayload,\n\t\tconfig,\n\t\ttooltipLabel,\n\t\thideLabel = false,\n\t\tindicator = \"dot\",\n\t\thideIndicator = false,\n\t\tnestLabel = false,\n\t\t...restProps\n\t} = $props();\n\n\tconst itemConfig = $derived(getPayloadConfigFromPayload(config, payload));\n</script>\n\n{#if itemConfig}\n\t<div\n\t\tclass={cn(\n\t\t\t\"border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl\",\n\t\t\tclassName\n\t\t)}\n\t\t{...restProps}\n\t>\n\t\t{#if !hideLabel}\n\t\t\t{tooltipLabel}\n\t\t{/if}\n\t\t<div class=\"grid gap-1.5\">\n\t\t\t{#each itemConfig as item}\n\t\t\t\t<div\n\t\t\t\t\tclass={cn(\n\t\t\t\t\t\t\"[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5\",\n\t\t\t\t\t\tindicator === \"dot\" && \"items-center\"\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{#if item?.icon}\n\t\t\t\t\t\t<item.icon />\n\t\t\t\t\t{:else if !hideIndicator}\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclass={cn(\"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\", {\n\t\t\t\t\t\t\t\t\"h-2.5 w-2.5\": indicator === \"dot\",\n\t\t\t\t\t\t\t\t\"w-1\": indicator === \"line\",\n\t\t\t\t\t\t\t\t\"w-0 border-[1.5px] border-dashed bg-transparent\": indicator === \"dashed\",\n\t\t\t\t\t\t\t\t\"my-0.5\": nestLabel && indicator === \"dashed\",\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\tstyle=\"--color-bg: {item?.color}; --color-border: {item?.color};\"\n\t\t\t\t\t\t></div>\n\t\t\t\t\t{/if}\n\t\t\t\t\t<div\n\t\t\t\t\t\tclass={cn(\n\t\t\t\t\t\t\t\"flex flex-1 justify-between leading-none\",\n\t\t\t\t\t\t\tnestLabel ? \"items-end\" : \"items-center\"\n\t\t\t\t\t\t)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div class=\"grid gap-1.5\">\n\t\t\t\t\t\t\t<span class=\"text-muted-foreground\">\n\t\t\t\t\t\t\t\t{item?.label}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<span class=\"text-foreground font-mono font-medium tabular-nums\">\n\t\t\t\t\t\t\t{item?.value}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t{/each}\n\t\t</div>\n\t</div>\n{/if}\n",
			"target": "chart/chart-tooltip.svelte",
			"type": "registry:ui"
		},
		{
			"name": "chart-utils.js",
			"content": "export const THEMES = { light: \"\", dark: \".dark\" };\n\n// Helper to extract item config from a payload.\nexport function getPayloadConfigFromPayload(config, payload) {\n\tconsole.log(\"payload\", payload);\n\t// Ensure the payload is an object\n\tif (typeof payload === \"object\" && payload !== null) {\n\t\t// Get all the keys in the payload dynamically\n\t\tconst payloadKeys = Object.keys(payload);\n\n\t\t// Loop over the keys from the payload\n\t\treturn payloadKeys\n\t\t\t.map((key) => {\n\t\t\t\tconst itemValue = payload[key];\n\t\t\t\tconst itemConfig = config[key];\n\n\t\t\t\t// Return the config merged with the value if the config exists for this key\n\t\t\t\tif (itemConfig) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...itemConfig, // chartConfig properties (label, color, etc.)\n\t\t\t\t\t\tvalue: itemValue, // payload value\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t// If there's no config for the key, return undefined or skip it\n\t\t\t\treturn undefined;\n\t\t\t})\n\t\t\t.filter(Boolean); // Filter out undefined values\n\t}\n\n\t// Return undefined if the payload is invalid\n\treturn undefined;\n}\n",
			"target": "chart/chart-utils.js",
			"type": "registry:ui"
		},
		{
			"name": "index.js",
			"content": "import ChartContainer from \"./chart-container.svelte\";\nimport ChartLegend from \"./chart-legend.svelte\";\nimport ChartTooltip from \"./chart-tooltip.svelte\";\n\nexport {\n\tChartContainer,\n\tChartLegend,\n\tChartTooltip,\n\tChartContainer as Container,\n\tChartLegend as Legend,\n\tChartTooltip as Tooltip,\n};\n",
			"target": "chart/index.js",
			"type": "registry:ui"
		}
	]
}